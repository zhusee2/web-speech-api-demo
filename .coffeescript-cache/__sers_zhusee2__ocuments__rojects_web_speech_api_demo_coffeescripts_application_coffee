{"mtime":1374308774,"js":"(function() {\n  var BaseClass, VoiceAssistant,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  window.VA = {\n    debug: false,\n    log: function() {\n      if (VA.debug) {\n        return console.log(arguments);\n      }\n    }\n  };\n\n  BaseClass = (function() {\n    function BaseClass(container) {\n      this.container = container;\n      this.container = $(this.container);\n      if (this.container.length < 1) {\n        return false;\n      }\n    }\n\n    BaseClass.prototype.init = function() {\n      return this.bindEvents();\n    };\n\n    BaseClass.prototype.bindEvents = function() {};\n\n    return BaseClass;\n\n  })();\n\n  VoiceAssistant = (function(_super) {\n    __extends(VoiceAssistant, _super);\n\n    function VoiceAssistant(container) {\n      this.container = container;\n      VoiceAssistant.__super__.constructor.apply(this, arguments);\n      this.fallbacks = {\n        recognition: this.container.find('.fallback-recognition')\n      };\n      this.responseBlock = this.container.find('.response-block');\n      this.speakButton = new VoiceAssistant.SpeakButton(this.container.find('#btn-speak'), this);\n      this.commandProcessor = new VoiceAssistant.CommandProcessor(this);\n      this.responseQueue = [];\n      this.speaking = function() {\n        if (window.speechSynthesis != null) {\n          return window.speechSynthesis.speaking;\n        } else {\n          return false;\n        }\n      };\n      this.init();\n    }\n\n    VoiceAssistant.prototype.init = function() {\n      if (window.speechSynthesis != null) {\n        return this.bindEvents();\n      } else {\n        return this.displayFallbackMsg();\n      }\n    };\n\n    VoiceAssistant.prototype.bindEvents = function() {\n      var _this = this;\n\n      return this.container.on('submit', '.popover .form-recognition', function(event) {\n        var command;\n\n        event.preventDefault();\n        VA.log('Form submitted.');\n        command = $('#input-command').val();\n        _this.commandProcessor.process(command);\n        return _this.speakButton.hidePopover();\n      });\n    };\n\n    VoiceAssistant.prototype.addResponse = function(responseObj) {\n      var response;\n\n      response = new VoiceAssistant.Response(responseObj);\n      this.responseQueue.push(response);\n      if (!this.speaking()) {\n        return this.playResponse();\n      }\n    };\n\n    VoiceAssistant.prototype.playResponse = function() {\n      var response, responseDOM;\n\n      if (this.responseQueue.length > 0) {\n        VA.log('Ready to play response.');\n        response = this.responseQueue.shift();\n        responseDOM = response.toDOM();\n        this.responseBlock.empty();\n        this.responseBlock.append(responseDOM);\n        return this.speakResponse($(responseDOM).text());\n      }\n    };\n\n    VoiceAssistant.prototype.speakResponse = function(responseText) {\n      var u,\n        _this = this;\n\n      VA.log(\"Speak requested: \" + responseText);\n      u = new SpeechSynthesisUtterance(responseText);\n      u.lang = \"zh-TW\";\n      u.onend = function(event) {\n        VA.log('Utterance Ended.', event);\n        return _this.playResponse();\n      };\n      if (typeof console !== \"undefined\" && console !== null) {\n        console.log(u);\n      }\n      return window.speechSynthesis.speak(u);\n    };\n\n    VoiceAssistant.prototype.displayFallbackMsg = function() {\n      return this.responseBlock.find('.fallback-synthesis').removeClass('hide');\n    };\n\n    return VoiceAssistant;\n\n  })(BaseClass);\n\n  VoiceAssistant.SpeakButton = (function(_super) {\n    __extends(SpeakButton, _super);\n\n    function SpeakButton(container, assistant) {\n      this.container = container;\n      this.assistant = assistant;\n      SpeakButton.__super__.constructor.apply(this, arguments);\n      this.init();\n    }\n\n    SpeakButton.prototype.init = function() {\n      if (window.speechSynthesis != null) {\n        this.initPopover();\n      }\n      return this.bindEvents();\n    };\n\n    SpeakButton.prototype.initPopover = function() {\n      if (typeof webkitSpeechRecognition === \"undefined\" || webkitSpeechRecognition === null) {\n        return this.container.popover({\n          placement: 'top',\n          title: 'Speak to me. Not.',\n          content: this.assistant.fallbacks.recognition.html(),\n          html: true\n        });\n      }\n    };\n\n    SpeakButton.prototype.bindEvents = function() {\n      var _this = this;\n\n      return this.container.on('click', function(event) {\n        if (window.speechSynthesis != null) {\n          _this.toggleActive();\n        }\n        return event.preventDefault();\n      });\n    };\n\n    SpeakButton.prototype.toggleActive = function() {\n      return this.container.toggleClass('active');\n    };\n\n    SpeakButton.prototype.hidePopover = function() {\n      return this.container.popover('hide');\n    };\n\n    return SpeakButton;\n\n  })(BaseClass);\n\n  VoiceAssistant.CommandProcessor = (function(_super) {\n    __extends(CommandProcessor, _super);\n\n    function CommandProcessor(assistant) {\n      this.assistant = assistant;\n      CommandProcessor.__super__.constructor.apply(this, arguments);\n    }\n\n    CommandProcessor.prototype.process = function(commandText) {\n      if (commandText.match(/書/)) {\n        return this.respondToBook();\n      }\n    };\n\n    CommandProcessor.prototype.respondToBook = function() {\n      this.assistant.addResponse({\n        text: \"好的，正在尋找暢銷書籍⋯⋯\"\n      });\n      return this.assistant.addResponse({\n        hiddenText: \"我找到了一本好書：丹董的《越吃越享瘦 丹董的爆食減肥法：你不可不吃的 150 家高檔餐廳》。今天有簽書會，要參加嗎？\",\n        image: \"images/cover.jpg\"\n      });\n    };\n\n    return CommandProcessor;\n\n  })(BaseClass);\n\n  VoiceAssistant.Response = (function() {\n    function Response(responseObject) {\n      this.responseObject = responseObject;\n      this.container = $('<div>').addClass('response');\n      this.init();\n    }\n\n    Response.prototype.init = function() {\n      return this.appendResponse();\n    };\n\n    Response.prototype.appendResponse = function() {\n      var content, type, _ref, _results;\n\n      _ref = this.responseObject;\n      _results = [];\n      for (type in _ref) {\n        content = _ref[type];\n        switch (type) {\n          case \"text\":\n            _results.push(this.appendText(content));\n            break;\n          case \"hiddenText\":\n            _results.push(this.appendText(content, \"hide\"));\n            break;\n          case \"image\":\n            _results.push(this.appendImage(content));\n            break;\n          default:\n            _results.push(void 0);\n        }\n      }\n      return _results;\n    };\n\n    Response.prototype.appendText = function(textContent, className) {\n      if (className == null) {\n        className = \"\";\n      }\n      return this.container.append($('<p>').addClass(className).text(textContent));\n    };\n\n    Response.prototype.appendImage = function(imageSrc) {\n      return this.container.append($('<img>').attr('src', imageSrc));\n    };\n\n    Response.prototype.toDOM = function() {\n      return this.container.clone();\n    };\n\n    return Response;\n\n  })();\n\n  $(function() {\n    return VA.instance = new VoiceAssistant('#voice-assistant');\n  });\n\n}).call(this);\n"}